{% assign product_image = true %}
{% if product.images.size == 0 %}
	{% assign product_image = false %}
{% endif %}

{%- assign productJSON = product | json -%}

{%- for var in product.variants -%}
	{%- if var.id -%}
	{%- assign varIDold = '"id":' | append: var.id | append:',' -%}
		{%- assign inventory_qty = var.inventory_quantity | default: 0 -%}
		{%- assign varQ = '"inventory_quantity":' | append: inventory_qty | append:',' -%}
	{%- assign varIDnew = varIDold | append: varQ -%}

	{%- if productJSONnew.size > 0 -%}
		{%- assign productJSONnew = productJSONnew | replace: varIDold, varIDnew -%}
	{%- else -%}
		{%- assign productJSONnew = productJSON | replace: varIDold, varIDnew -%}
		{%- endif -%}
	{%- endif -%}
{%- endfor -%}

<script type="application/json" id="product_json_{{ section.id }}">
	{{ productJSONnew }}
</script>

<script type="application/json" id="variant_weights_{{ section.id }}">
	{% raw %}{{% endraw %}{% for variant in product.variants %}{% if variant.id %}{% assign variant_weight = variant.weight | default: 0 %}{% if forloop.last %}"{{ variant.id }}":"{{ variant_weight | weight_with_unit: variant.weight_unit }}"{% else %}"{{ variant.id }}":"{{ variant_weight | weight_with_unit: variant.weight_unit }}",{% endif %}{% endif %}{% endfor %}{% raw %}}{% endraw %}
</script>

<script>
	theme.productViewType = '{{ section.settings.product_view_type }}';
</script>

<div itemscope itemtype="http://schema.org/Product" class="product-scope container type_{{ section.settings.product_view_type }}">
	<meta itemprop="url" content="{{ shop.url }}{{ product.url }}" />
	<meta itemprop="image" content="{{ product.featured_image.src | product_img_url: 'grande' }}" />

	<div class="row">
		{% case section.settings.product_view_type %}
			{% when 'carousel'  %}
				{%- assign product_info_class = 'col-sm-5' -%}

				<div class="single_product__img col-sm-7">
					{% case product.images.size %}
						{% when 0 %}
							<img src="{{ 'no_image.png' | asset_url }}" alt="">
						{% when 1 %}
							<img src="{{ product.featured_image.src | product_img_url: '470x509', crop: section.settings.image_alignment }}" alt="">

						{% else %}
							<div id="gallery_thumbs-{{ section.id }}" class="gallery_thumbs gallery_thumbs__{{ section.settings.image_size }} swiper-container">
								<div class="swiper-wrapper">
									{% for image in product.images %}
										<div class="swiper-slide">
											<img src="{{ image.src | product_img_url: '170x163', crop: section.settings.image_alignment }}" alt="">
										</div>
									{% endfor %}
								</div>
							</div>

							<div id="gallery_big-{{ section.id }}" class="gallery_big swiper-container">
								<div class="swiper-wrapper">
									<div class="swiper-slide">
										<img id="primary_img_{{ section.id }}" src="{{ product.images.first | product_img_url: '470x509', crop: section.settings.image_alignment }}" alt="{{ product.images.first.alt }}">
									</div>

									{% for image in product.images offset:1 %}
										<div class="swiper-slide">
											<img src="{{ image.src | product_img_url: '470x509', crop: section.settings.image_alignment }}" alt="">
										</div>
									{% endfor %}
								</div>
							</div>

							<div id="prev_{{ section.id }}" class="swiper_btn swiper_btn__prev"></div>
							<div id="next_{{ section.id }}" class="swiper_btn swiper_btn__next"></div>
					{% endcase %}

				</div>

			{% when 'sticky'  %}
				{%- assign product_info_class = 'col-sm-6' -%}

				<div class="single_product__img col-sm-6">
					{% case product.images.size %}
						{% when 0 %}
							<img src="{{ 'no_image.png' | asset_url }}" alt="">
						{% when 1 %}
							<img src="{{ product.featured_image.src | product_img_url: '570x617', crop: section.settings.image_alignment }}" alt="">

						{% else %}
							{% for image in product.images %}
								<img src="{{ image.src | product_img_url: '570x617', crop: section.settings.image_alignment }}" alt="">
							{% endfor %}
					{% endcase %}
				</div>	

		{% endcase %}


		<div class="single_product__info {{ product_info_class }}">
			<h2 itemprop="name" class="single_product__title">{{ product.title }}</h2>

			<div class="single_product__details">
				<form action="/cart/add" method="post" enctype="multipart/form-data" data-section="{{ section.id }}">
					
					<div class="details_wrapper">
						<p class="single_product__availability">
							<b>{{ 'layout.product.availability' | t }}:</b>

							<span id="single_product__availability-{{ section.id }}"></span>
						</p>

						{% if section.settings.show_sku %}
							<p class="single_product__sku">
								<b>{{ 'layout.product.sku' | t }}:</b>
								<span id="single_product__sku-{{ section.id }}"></span>
							</p>
						{% endif %}

						{% if section.settings.show_barcode %}
							<p class="single_product__barcode">
								<b>{{ 'layout.product.barcode' | t }}:</b>
								<span id="single_product__barcode-{{ section.id }}"></span>
							</p>
						{% endif %}

						{% if section.settings.show_weight %}
							<p class="single_product__weight">
								<b>{{ 'layout.product.weight' | t }}:</b>
								<span id="single_product__weight-{{ section.id }}"></span>
							</p>
						{% endif %}

						{% if section.settings.show_collections %}
							<p class="single_product__collections">
								<b>{{ 'layout.product.collections' | t }}:</b>

								{% if product.collections.size > 0 %}
									<a href="{{ product.collections.first.url }}">{{ product.collections.first.title }}</a>{% for collection in product.collections offset:1 %}, <a href="{{ collection.url }}">{{ collection.title }}</a>{% endfor %}
								{% else %}
									—
								{% endif %}
							</p>
						{% endif %}

						{% if section.settings.show_product_types %}
							<p class="single_product__type">
								<b>{{ 'layout.product.product_type' | t }}:</b>

								<span>
									{% if product.type.size > 0 %}
										{{ product.type }}
									{% else %}
										—
									{% endif %}
								</span>
							</p>
						{% endif %}

						{% if section.settings.show_vendor %}
							<p class="single_product__vendor">
								<b>{{ 'layout.product.vendor' | t }}:</b>
								<span>{{ product.vendor }}</span>
							</p>
						{% endif %}
						{% if section.settings.show_bundle and product.metafields.custom.bundle_items %}
  <div class="single_bundle_items">
    <b>Bundle Items:</b>
    <ul>
      {% for item in product.metafields.custom.bundle_items.value %}
        <li>
          <a href="{{ item.url }}">
            {{ item.title }}
          </a>
        </li>
      {% endfor %}
    </ul>
  </div>
{% endif %}

{% if product.tags contains 'user-collection' %}
  <div class="user_collection_bundle">
    <div class="bundle_header">
      <h4 class="bundle_title">Build Your Collection:</h4>
      <div class="bundle_savings_info">
        <span class="bundle_savings">Save up to 20%</span>
      </div>
    </div>

    <div class="discount_tiers">
      <div class="discount_tier">
        <span class="tier_count">3<span class="tier_subtitle">items</span></span>
        <span class="tier_discount">10% OFF</span>
      </div>
      <div class="discount_tier">
        <span class="tier_count">4<span class="tier_subtitle">items</span></span>
        <span class="tier_discount">15% OFF</span>
      </div>
      <div class="discount_tier">
        <span class="tier_count">6<span class="tier_subtitle">items</span></span>
        <span class="tier_discount">20% OFF</span>
      </div>
    </div>

    <div class="collection_products" id="collection_products">
      {% assign user_collection = collections['user-collection'] %}
      {% if user_collection %}
        {% for collection_product in user_collection.products limit: 20 %}
          <div class="collection_product_item" data-product-id="{{ collection_product.id }}" data-variant-id="{{ collection_product.variants.first.id }}" data-price="{{ collection_product.price }}">
            <div class="product_image">
              {% if collection_product.featured_image %}
                <img src="{{ collection_product.featured_image | img_url: '150x150' }}" alt="{{ collection_product.title }}">
              {% else %}
                <div class="no_image_placeholder">No Image</div>
              {% endif %}
            </div>
            <div class="product_details">
              <h5 class="product_title">
                <a href="{{ collection_product.url }}">{{ collection_product.title }}</a>
              </h5>
              <div class="product_price">
                <span class="money">{{ collection_product.price | money }}</span>
              </div>
              <div class="product_variants">
                {% if collection_product.variants.size > 1 %}
                  <select class="variant_selector" data-product-id="{{ collection_product.id }}">
                    {% for variant in collection_product.variants %}
                      <option value="{{ variant.id }}" data-price="{{ variant.price }}">{{ variant.title }}</option>
                    {% endfor %}
                  </select>
                {% else %}
                  <div class="single_variant">{{ collection_product.variants.first.title }}</div>
                {% endif %}
              </div>
              <div class="add_to_collection">
                <button type="button" class="btn btn-sm add_to_collection_btn" data-product-id="{{ collection_product.id }}">
                  Add
                </button>
              </div>
            </div>
          </div>
        {% endfor %}
      {% endif %}
    </div>

    <div class="selected_items" id="selected_items" style="display: none;">
      <h5>Selected Items:</h5>
      <div class="selected_items_list" id="selected_items_list"></div>
      <div class="collection_total">
        <div class="total_breakdown">
          <div class="subtotal">
            <span>Subtotal:</span>
            <span class="money" id="collection_subtotal">$0.00</span>
          </div>
          <div class="discount">
            <span>Discount:</span>
            <span class="money" id="collection_discount">$0.00</span>
          </div>
          <div class="total">
            <span>Total:</span>
            <span class="money" id="collection_total">$0.00</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div id="collection_items_data" style="display:none;"></div>
{% elsif section.settings.show_bundle_quantity and product.metafields.custom.bundles_with_quantity %}
  <div class="enhanced_bundle_items">
    <div class="bundle_header">
      <h4 class="bundle_title">Bundle Contents:</h4>
      <div class="bundle_savings_info">
        {% assign total_individual_price = 0 %}
        {% assign bundle_count = 0 %}
        {% for item in product.metafields.custom.bundles_with_quantity.value %}
          {% assign product_ref = item.add_products.value %}
          {% assign quantity = item.product_quantity %}
          {% if product_ref %}
            {% assign bundle_count = bundle_count | plus: 1 %}
            {% assign item_total = product_ref.price | times: quantity %}
            {% assign total_individual_price = total_individual_price | plus: item_total %}
          {% endif %}
        {% endfor %}
        
        {% assign bundle_savings = total_individual_price | minus: product.price %}
        {% if bundle_savings > 0 %}
          <span class="bundle_savings">You Save: <span class="money">{{ bundle_savings | money }}</span></span>
        {% endif %}
      </div>
    </div>

    <div class="bundle_items_text_list">
      {% assign bundle_count = 0 %}
      {% for item in product.metafields.custom.bundles_with_quantity.value %}
        {% assign product_ref = item.add_products.value %}
        {% assign quantity = item.product_quantity %}

        {% if product_ref %}
          {% assign bundle_count = bundle_count | plus: 1 %}
          {% if bundle_count <= 4 %}
            <div class="bundle_text_item">
              <span class="bundle_item_name">
                <a href="{{ product_ref.online_store_url }}">{{ product_ref.title }}</a>
              </span>
              <span class="bundle_item_quantity">(x{{ quantity }})</span>
              <span class="bundle_item_price">
                <span class="money">{{ product_ref.price | money }}</span>
                {% if quantity > 1 %}
                  <span class="bundle_item_total_text">- Total: <span class="money">{{ product_ref.price | times: quantity | money }}</span></span>
                {% endif %}
              </span>
            </div>
          {% endif %}
        {% endif %}
      {% endfor %}
    </div>
    
    {% if bundle_count > 4 %}
      <button type="button" class="btn btn-sm read_more_bundle_btn" id="bundle_items_popup_btn">
        View All Items ({{ bundle_count | minus: 4 }} more)
      </button>
    {% endif %}

    <div class="bundle_summary">
      <div class="bundle_total_breakdown">
        <div class="individual_total">
          <span>Individual Total:</span>
          <span class="money">{{ total_individual_price | money }}</span>
        </div>
        <div class="bundle_price">
          <span>Bundle Price:</span>
          <span class="money">{{ product.price | money }}</span>
        </div>
        {% if bundle_savings > 0 %}
          <div class="total_savings">
            <span>Total Savings:</span>
            <span class="money savings_amount">{{ bundle_savings | money }}</span>
          </div>
        {% endif %}
      </div>
    </div>
  </div>

  <div id="bundle_items_data" style="display:none;">
    {% for item in product.metafields.custom.bundles_with_quantity.value %}
      {% assign product_ref = item.add_products.value %}
      {% assign quantity = item.product_quantity %}
      {% if product_ref %}
        <div class="bundle_data"
             data-title="{{ product_ref.title }}"
             data-variant-id="{{ product_ref.variants.first.id }}"
             data-qty="{{ quantity }}"
             data-price="{{ product_ref.price }}"
             data-total="{{ product_ref.price | times: quantity }}">
        </div>
      {% endif %}
    {% endfor %}
  </div>

{% endif %}

  {% if section.settings.show_bundle_quantity and product.metafields.custom.bundles_with_quantity %}
    <div id="bundle_items_popup" class="bundle_popup" style="display: none;">
      <div class="bundle_popup_content">
        <div class="bundle_popup_header">
          <h3>Complete Bundle Contents</h3>
          <button id="close_bundle_popup" class="bundle_popup_close">&times;</button>
        </div>
        <div class="bundle_popup_body">
          <div class="bundle_items_grid">
            {% for item in product.metafields.custom.bundles_with_quantity.value %}
              {% assign product_ref = item.add_products.value %}
              {% assign quantity = item.product_quantity %}
              {% if product_ref %}
                <div class="bundle_grid_item">
                  <div class="bundle_item_image">
                    {% if product_ref.featured_image %}
                      <img src="{{ product_ref.featured_image | img_url: '200x200' }}" alt="{{ product_ref.title }}">
                    {% else %}
                      <div style="background: #f8f9fa; display: flex; align-items: center; justify-content: center; color: #999; height: 150px;">
                        No Image
                      </div>
                    {% endif %}
                  </div>
                  <div class="bundle_item_info">
                    <h4>
                      <a href="{{ product_ref.online_store_url }}">{{ product_ref.title }}</a>
                    </h4>
                    <div class="bundle_quantity">Quantity: {{ quantity }}</div>
                    <div class="bundle_price">
                      {% if product_ref.price %}
                        <span class="money">{{ product_ref.price | money }}</span>
                        {% if quantity > 1 %}
                          <div class="bundle_item_total_popup">Total: <span class="money">{{ product_ref.price | times: quantity | money }}</span></div>
                        {% endif %}
                      {% endif %}
                    </div>
                  </div>
                </div>
              {% endif %}
            {% endfor %}
          </div>
          
          <div class="bundle_popup_summary">
            <div class="bundle_total_breakdown">
              <div class="individual_total">
                <span>Individual Total:</span>
                <span class="money">{{ total_individual_price | money }}</span>
        </div>
              <div class="bundle_price">
                <span>Bundle Price:</span>
                <span class="money">{{ product.price | money }}</span>
              </div>
              {% if bundle_savings > 0 %}
                <div class="total_savings">
                  <span>Total Savings:</span>
                  <span class="money savings_amount">{{ bundle_savings | money }}</span>
                </div>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
    </div>
  {% endif %}

						{% if section.settings.show_tags %}
							<p class="single_product__tags">
								<b>{{ 'layout.product.tags' | t }}:</b>

								{% if product.tags.size > 0 %}
									<span>{{ product.tags | first }}</span>{% for tag in product.tags offset:1 %}, <span>{{ tag }}</span>{% endfor %}
								{% else %}
									—
								{% endif %}
							</p>
						{% endif %}

						<div class="single_product__options {% if product.variants.size == 1 and product.variants.first.title contains 'Default' %}hidden{% endif %}">
							<select name="id" id="product_select_{{ section.id }}">
								{% for variant in product.variants %}
									<option value="{{ variant.id }}">{{ variant.title | escape }}</option>
								{% endfor %}
							</select>
						</div>

						<div class="clearfix"></div>

						{% if  product.variants.size > 1 %}
							{% if product.options.size > 0 %}
								{% for option in product.options %}
									{% assign downcased_option = option | downcase %}
									{%- assign product_color_option = settings.color_option | downcase -%}
									{%- assign product_size_option = settings.size_option | downcase -%}

									{% if downcased_option contains product_color_option %}
										{% assign option_color_index = forloop.index | minus: 1 %}
									{% endif %}

									{% if downcased_option contains product_size_option %}
										{% assign option_size_index = forloop.index | minus: 1 %}
									{% endif %}
								{% endfor %}
							{% endif %}

							{% if section.settings.show_color %}
								<div class="color_product__options">
									{% if option_color_index %}
										<div class="color_toggle" data-option-index="{{ option_color_index }}"></div>
									{% endif %}
								</div>
							{% endif %}

							{% if section.settings.show_size %}
								<div class="size_product__options">
									{% if option_size_index %}
										<div class="size_toggle" data-option-index="{{ option_size_index }}"></div>
									{% endif %}
								</div>
							{% endif %}
						{% endif %}

						<div class="price_and_quantity">
							<!-- Bold: Memberships (product price) -->
							{% include 'bold-memberships-price' %}
							{% if bold_hide_item == false %}
							<p class="single_product__price"><span id="single_product__price-{{ section.id }}"><span class="money">{{ product.price | money }}</span></span></p>
							{% endif %}
							<!-- end Bold code -->

							<div class="single_product__quantity">
								<label for="single_product__quantity-{{ section.id }}">{{ 'layout.product.quantity' | t }}: </label>

								<div class="quantity_box">
									<span class="quantity_down"><i class="fa fa-minus" aria-hidden="true"></i></span>

									<input id="single_product__quantity-{{ section.id }}" class="quantity_input" type="text" name="quantity" value="1">
									
									<span class="quantity_up"><i class="fa fa-plus" aria-hidden="true"></i></span>

								</div>
							</div>
						</div>
						
						<div class="button_block">
							<!-- Bold: Memberships (add to cart) -->
							{% include 'bold-memberships-addtocart' %}
							{% if bold_hide_item == false %}
							<button type="submit" name="add" class="btn" id="single_product__addtocart-{{ section.id }}">{{ 'layout.product.add_to_cart' | t }}</button>
							{% endif %}
							<!-- end Bold code -->
								
							{% if section.settings.show_notify_button %}
								<span class="btn notify_btn" id="notify_trigger_button">{{ 'layout.product.notify_button' | t }}</span>
							{% endif %}
						</div>
					</div>
				</form>

				{% if section.settings.show_notify_button %}
					<div class="product_notify">
						{% form 'contact', class: 'notify_form' %}
						{{ form.errors | default_errors }}

						<p class="form_text">{{ 'layout.product.notify_text' | t }}</p>
						
						<input type="hidden" name="contact[tags]" value="Notify product">
						<label for="product_notify_input" class="hidden">Body</label>
						<input id="product_notify_input" type="hidden" name="contact[product]" value="{{ shop.url }}{{ product.url }}">
						<div class="form_wrapper">
							<input required type="email" name="contact[email]" class="notify__input" placeholder="Enter your email">
							<textarea required name="contact[comment]" class="notify__input" placeholder="Add your comment about the product of interest to you"></textarea>
							<button class="btn" type="submit">{{ 'layout.product.notify_send' | t }}</button>
						</div>
						
					{% endform %}
					</div>
				{% endif %}

				{% if section.settings.show_share_buttons %}
					{%- assign product_image = product.featured_image -%}
					{%- include 'widget-social-sharing', share_title: product.title, share_link: product.url, share_image: product_image -%}
				{% endif %}

			</div>

		</div>

	</div>

	{% if settings.wishlist_toggle %}
		<form accept-charset="UTF-8" action="/contact" id="wishlist_form" method="post">
			<input name="form_type" type="hidden" value="customer">
			<input name="utf8" type="hidden" value="✓">
			<input type="hidden" name="contact[email]" value="{{ customer.email }}"/>
			<input id="update-me" type="hidden" name="contact[tags]" value="{{ value }}" />
		</form>
	{% endif %}

	{% if section.settings.show_desc %}
		{% if section.blocks.size > 0 %}
			<div class="tab_content_wrapper">
				<div class="tab_navigation">
					<span class="tab_nav tab_nav_1 active" data-tab="0">Description</span>
					{%- assign block_counter = 1 -%}

					{% for block in section.blocks %}
						{% case block.type %}
							{% when 'all_tab'  %}
								{%- assign block_counter = block_counter | plus: 1 -%}
								<span class="tab_nav tab_nav_{{ block_counter }}" data-tab="{{ block_counter | minus: 1 }}">{{ block.settings.title }}</span>

							{% when 'product_tab' %}
								{% if block.settings.custom_product == product.handle %}
									{%- assign block_counter = block_counter | plus: 1 -%}

									<span class="tab_nav tab_nav_{{ block_counter }}" data-tab="{{ block_counter | minus: 1 }}">{{ block.settings.title }}</span>
								{% endif %}
								
							{% when 'collection_tab'  %}
								{% if product.collections.size > 0 %}
									{% for collection in product.collections %}
										{% if collection.title contains collections[block.settings.custom_collection].title %}
											{%- assign block_counter = block_counter | plus: 1 -%}

											<span class="tab_nav tab_nav_{{ block_counter }}" data-tab="{{ block_counter | minus: 1 }}">{{ block.settings.title }}</span>
										{% endif %}
									{% endfor %}
								{% endif %}
						{% endcase %}
						
					{% endfor %}
				</div>

				<div class="tab_content">
					<div class="tab_item tab_item_1 active">
						<div itemprop="description" class="product_description rte">
							<div>{{ product.description }}</div>
						</div>
					</div>
					{%- assign block_counter = 1 -%}

					{% for block in section.blocks %}
						{% case block.type %}
							{% when 'all_tab'  %}
								{%- assign block_counter = block_counter | plus: 1 -%}
								<div class="rte tab_item tab_item_{{ block_counter }}">{{ pages[block.settings.page].content }}</div>

							{% when 'product_tab' %}
								{% if block.settings.custom_product == product.handle %}
									{%- assign block_counter = block_counter | plus: 1 -%}

									<div class="rte tab_item tab_item_{{ block_counter }}">{{ pages[block.settings.page].content }}</div>
								{% endif %}
								
							{% when 'collection_tab'  %}
								{% if product.collections.size > 0 %}
									{% for collection in product.collections %}
										{% if collection.title contains collections[block.settings.custom_collection].title %}
											{%- assign block_counter = block_counter | plus: 1 -%}

											<div class="rte tab_item tab_item_{{ block_counter }}">{{ pages[block.settings.page].content }}</div>
										{% endif %}
									{% endfor %}
								{% endif %}

						{% endcase %}
					{% endfor %}
				</div>
			</div>

		{% else %}	
			<div itemprop="description" class="product_description rte">
				<div>{{ product.description }}</div>
			</div>

		{% endif %}
	{% endif %}

</div>

{% if section.settings.show_related_products %}
	{% if collection and collection.products_count > 1 %}
		{% if collection == null or collection.handle == 'frontpage' or collection.handle == 'all' %}

		{% assign found_a_collection = false %}
			{% for c in product.collections %}
				{% if found_a_collection == false and c.handle != 'frontpage' and c.handle != 'all' and c.all_products_count > 1 %}
					{% assign found_a_collection = true %}
					{% assign collection = c %}
				{% endif %}
			{% endfor %}
		{% endif %}

		<div class="widget_related_products container">
			<h3>{{ section.settings.related_products_title }}</h3>

			<div class="widget_content">
				<div class="row product_listing__main product_listing_related">
					{% assign current_product_title = product.title %}
					{% assign current_product_found = true %}

					{% for prod in collection.products limit:5 %}
						{% if prod.title == current_product_title %}
							{% assign current_product_found = false %} 
						{% endif %}

						{% unless prod.title == current_product_title %}
							{% unless forloop.last and current_product_found %}
								{% assign product = prod %}
								<div class="col-sm-3 product product__{% cycle 'counter': '1','2','3','4' %}">
									{% include 'product-listing-item' img_size: '255x320', img_alignment: section.settings.image_alignment %}
								</div>
							{% endunless %}
						{% endunless %}
					{% endfor %}
				</div>
			</div>
		</div>
	{% endif %}
{% endif %}

{% schema %}
{
	"name": "Product template",
	"class": "section section_single-product section_product section_template__product",
	"max_blocks": 30,
	"settings": [

		// VIEW ///////////////////////////////////////////////////////////
		{
			"type": "header",
			"content": "Product"
		},
		{
			"type": "select",
			"id": "product_view_type",
			"label": "View type",
			"options": [
				{
					"value": "sticky",
					"label": "Sticky"
				},
				{
					"value": "carousel",
					"label": "Carousel"
				}
			]
		},


		// IMAGES ///////////////////////////////////////////////////////////
		{
			"type": "header",
			"content": "Images"
		},
		{
			"type": "select",
			"id": "image_alignment",
			"label": "Image alignment",
			"options": [
				{
					"value": "top",
					"label": "Top"
				},
				{
					"value": "center",
					"label": "Middle"
				},
				{
					"value": "bottom",
					"label": "Bottom"
				}
			]
		},


		// SETTINGS /////////////////////////////////////////////////////////
		{
			"type": "header",
			"content": "Settings"
		},
		{
			"type": "checkbox",
			"id": "show_weight",
			"label": "Show weight"
		},
		{
			"type": "checkbox",
			"id": "show_sku",
			"label": "Show SKU"
		},
		{
			"type": "checkbox",
			"id": "show_barcode",
			"label": "Show barcode"
		},
		{
			"type": "checkbox",
			"id": "show_collections",
			"label": "Show collections"
		},
		{
			"type": "checkbox",
			"id": "show_product_types",
			"label": "Show product types"
		},
		{
			"type": "checkbox",
			"id": "show_vendor",
			"label": "Show vendor"
		},
			{
			"type": "checkbox",
			"id": "show_bundle",
			"label": "Show Bundles"
		},
		{
			"type": "checkbox",
			"id": "show_bundle_quantity",
			"label": "Bundles With Quantity"
		},
		{
			"type": "checkbox",
			"id": "show_tags",
			"label": "Show tags"
		},
		{
			"type": "checkbox",
			"id": "show_share_buttons",
			"label": "Show social sharing buttons"
		},
		{
			"type": "checkbox",
			"id": "show_desc",
			"label": "Show description"
		},
		{
			"type": "checkbox",
			"id": "show_color",
			"label": "Show color options"
		},
		{
			"type": "checkbox",
			"id": "show_size",
			"label": "Show size options"
		},
		{
			"type": "checkbox",
			"id": "show_notify_button",
			"label": "Show notify button",
			"info": "Allow to send applications in case the goods are not available."
		},
		{
			"type": "checkbox",
			"id": "show_related_products",
			"label": "Show Related products"
		},
		{
			"type": "text",
			"id": "related_products_title",
			"label": "Related products title",
			"default": "Related products"
		}
	],
	"blocks": [
		// FOR ALL PRODUCT //////////////////////////////////////////////////////////////////////////////////
		{
			"type": "all_tab",
			"name": "Content for all product",
			"settings": [
				{
					"type": "text",
					"id": "title",
					"label": "Tab title",
					"default": "Tab title"
				},
				{
					"type": "page",
					"id": "page",
					"label": "Page",
					"info": "Select a page with content"
				}
			]
		},

		// FOR PRODUCT ////////////////////////////////////////////////////////////////////////////////////
		{
			"type": "product_tab",
			"name": "Content for product",
			"settings": [
				{
					"type": "text",
					"id": "title",
					"label": "Tab title",
					"default": "Tab title"
				},
				{
					"type": "product",
					"id": "custom_product",
					"label": "Product",
					"info": "Content will only be shown on this product."
				},
				{
					"type": "page",
					"id": "page",
					"label": "Page",
					"info": "Select a page with content"
				}
			]
		},

		// FOR COLLECTIONS ////////////////////////////////////////////////////////////////////////////////////
		{
			"type": "collection_tab",
			"name": "Content for collection",
			"settings": [
				{
					"type": "text",
					"id": "title",
					"label": "Tab title",
					"default": "Tab title"
				},
				{
					"type": "collection",
					"id": "custom_collection",
					"label": "Collection",
					"info": "Content will only be shown on products from this collection."
				},
				{
					"type": "page",
					"id": "page",
					"label": "Page",
					"info": "Select a page with content."
				}
			]
		}
	]
}
{% endschema %}

<script>
	var producText = {
		available: {{ 'layout.product.available' | t | json }},
		unavailable: {{ 'layout.product.unavailable' | t | json }},
		items: {{ 'layout.product.items' | t | json }},
	};
	var productImage = '{{ product_image }}';
</script>

<style>
.enhanced_bundle_items {
    margin: 20px 0;
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background: #f9f9f9;
}

.bundle_header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
    padding-bottom: 10px;
    border-bottom: 1px solid #ddd;
}

.bundle_title {
    margin: 0;
    color: #333;
    font-size: 18px;
    font-weight: bold;
}

.bundle_savings_info {
    text-align: right;
}

.bundle_savings {
    background: #28a745;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
}

.bundle_items_text_list {
    margin-bottom: 15px;
}

.bundle_text_item {
    display: flex;
    align-items: center;
    margin-bottom: 8px;
    padding: 8px 12px;
    background: white;
    border-radius: 4px;
    border: 1px solid #e0e0e0;
    font-size: 14px;
}

.bundle_item_name {
    flex: 1;
    margin-right: 10px;
}

.bundle_item_name a {
    color: #333;
    text-decoration: none;
    font-weight: 500;
}

.bundle_item_name a:hover {
    color: #7e7f66;
}

.bundle_item_quantity {
    margin-right: 10px;
    color: #666;
    font-weight: bold;
    font-size: 13px;
}

.bundle_item_price {
    text-align: right;
    color: #7e7f66;
    font-weight: bold;
}

.bundle_item_total_text {
    display: block;
    font-size: 12px;
    color: #999;
    font-weight: normal;
    margin-top: 2px;
}

.read_more_bundle_btn {
    margin: 10px 0;
    background: #7e7f66;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    width: 100%;
}

.read_more_bundle_btn:hover {
    background: #6a6b5a;
}

.bundle_summary {
    margin-top: 15px;
    padding-top: 15px;
    border-top: 1px solid #ddd;
}

.bundle_total_breakdown {
    background: white;
    padding: 15px;
    border-radius: 6px;
    border: 1px solid #e0e0e0;
}

.bundle_total_breakdown > div {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    font-size: 14px;
}

.bundle_total_breakdown > div:last-child {
    margin-bottom: 0;
    padding-top: 8px;
    border-top: 1px solid #e0e0e0;
    font-weight: bold;
}

.individual_total {
    color: #666;
}

.bundle_price {
    color: #333;
    font-weight: bold;
}

.total_savings {
    color: #28a745;
}

.savings_amount {
    color: #28a745;
    font-weight: bold;
}

/* Bundle Success Message Styles */
.bundle-success-message {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border: 2px solid #28a745;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 4px 20px rgba(0,0,0,0.3);
    z-index: 10000;
    max-width: 400px;
    text-align: center;
}

.bundle-success-content h4 {
    color: #28a745;
    margin: 0 0 10px 0;
    font-size: 18px;
}

.bundle-success-content p {
    margin: 0 0 15px 0;
    color: #666;
}

.bundle-success-content .btn {
    background: #28a745;
    color: white;
    padding: 8px 16px;
    text-decoration: none;
    border-radius: 4px;
    display: inline-block;
}

.bundle-success-content .btn:hover {
    background: #218838;
    color: white;
}

.bundle_popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
}

.bundle_popup_content {
    background: white;
    border-radius: 8px;
    max-width: 90%;
    max-height: 90%;
    width: 800px;
    overflow: hidden;
    position: relative;
}

.bundle_popup_header {
    padding: 20px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: #f8f9fa;
}

.bundle_popup_header h3 {
    margin: 0;
    color: #333;
    font-size: 20px;
}

.bundle_popup_close {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    color: #666;
    padding: 5px;
}

.bundle_popup_close:hover {
    color: #333;
}

.bundle_popup_body {
    padding: 20px;
    max-height: 60vh;
    overflow-y: auto;
}

.bundle_items_grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
}

.bundle_grid_item {
    border: 1px solid #eee;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s ease;
}

.bundle_grid_item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.bundle_item_image {
    width: 100%;
    height: 150px;
    overflow: hidden;
    background: #f8f9fa;
}

.bundle_item_image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.bundle_item_info {
    padding: 15px;
}

.bundle_item_info h4 {
    margin: 0 0 8px 0;
    font-size: 14px;
    line-height: 1.3;
}

.bundle_item_info h4 a {
    color: #333;
    text-decoration: none;
}

.bundle_item_info h4 a:hover {
    color: #7e7f66;
}

.bundle_quantity {
    margin: 5px 0;
    font-size: 12px;
    color: #666;
    font-weight: bold;
}

.bundle_price {
    margin: 5px 0 0 0;
    font-size: 14px;
    color: #7e7f66;
    font-weight: bold;
}

/* Responsive Design */
@media (max-width: 768px) {
    .bundle_popup_content {
        width: 95%;
        margin: 20px;
        max-height: 85vh;
    }
    
    .bundle_items_grid {
        grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
        gap: 15px;
    }
    
    .bundle_item_image {
        height: 120px;
    }
    
    .bundle_item_info {
        padding: 10px;
    }
    
    .bundle_popup_header {
        padding: 15px;
    }
    
    .bundle_popup_header h3 {
        font-size: 18px;
    }
    
    .bundle_popup_body {
        max-height: 50vh;
        padding: 15px;
    }
}

.bundle_popup_summary {
    margin-top: 20px;
    padding-top: 20px;
    border-top: 2px solid #e0e0e0;
}

.bundle_popup_summary .bundle_total_breakdown {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 6px;
    border: 1px solid #e0e0e0;
}

.bundle_item_total_popup {
    font-size: 12px;
    color: #666;
    margin-top: 2px;
}

body.popup_open {
    overflow: hidden;
}

.user_collection_bundle {
    margin: 20px 0;
    padding: 20px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background: #f9f9f9;
}

.discount_tiers {
    display: flex;
    gap: 15px;
    margin: 15px 0;
    justify-content: center;
}

.discount_tier {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 10px 15px;
    background: white;
    border: 2px solid #e0e0e0;
    border-radius: 6px;
    min-width: 80px;
}

.discount_tier.active {
    border-color: #28a745;
    background: #f8fff9;
}

.tier_count {
    font-size: 18px;
    font-weight: bold;
    color: #333;
}

.tier_subtitle {
    font-size: 12px;
    color: #666;
    display: block;
}

.tier_discount {
    font-size: 14px;
    font-weight: bold;
    color: #28a745;
    margin-top: 5px;
}

.collection_products {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 15px;
    margin: 20px 0;
}

.collection_product_item {
    background: white;
    border: 1px solid #e0e0e0;
    border-radius: 6px;
    padding: 15px;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.collection_product_item:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.collection_product_item.selected {
    border-color: #28a745;
    background: #f8fff9;
}

.product_image {
    width: 100%;
    height: 150px;
    margin-bottom: 10px;
    overflow: hidden;
    border-radius: 4px;
}

.product_image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.product_title {
    margin: 0 0 8px 0;
    font-size: 14px;
    line-height: 1.3;
}

.product_title a {
    color: #333;
    text-decoration: none;
}

.product_title a:hover {
    color: #7e7f66;
}

.product_price {
    font-size: 16px;
    font-weight: bold;
    color: #7e7f66;
    margin-bottom: 8px;
}

.product_variants {
    margin-bottom: 10px;
}

.variant_selector {
    width: 100%;
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 12px;
}

.single_variant {
    font-size: 12px;
    color: #666;
    padding: 5px;
    background: #f8f9fa;
    border-radius: 4px;
}

.add_to_collection_btn {
    width: 100%;
    background: #7e7f66;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.2s ease;
}

.add_to_collection_btn:hover {
    background: #6a6b5a;
}

.add_to_collection_btn.added {
    background: #28a745;
}

.selected_items {
    margin-top: 20px;
    padding: 15px;
    background: white;
    border-radius: 6px;
    border: 1px solid #e0e0e0;
}

.selected_items h5 {
    margin: 0 0 15px 0;
    color: #333;
}

.selected_items_list {
    margin-bottom: 15px;
}

.selected_item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 8px 0;
    border-bottom: 1px solid #f0f0f0;
}

.selected_item:last-child {
    border-bottom: none;
}

.selected_item_name {
    flex: 1;
    font-size: 14px;
}

.selected_item_price {
    font-weight: bold;
    color: #7e7f66;
}

.remove_item_btn {
    background: #dc3545;
    color: white;
    border: none;
    padding: 4px 8px;
    border-radius: 3px;
    cursor: pointer;
    font-size: 12px;
    margin-left: 10px;
}

.collection_total {
    border-top: 2px solid #e0e0e0;
    padding-top: 15px;
}

.total_breakdown > div {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    font-size: 14px;
}

.total_breakdown > div:last-child {
    font-weight: bold;
    font-size: 16px;
    color: #28a745;
    border-top: 1px solid #e0e0e0;
    padding-top: 8px;
    margin-top: 8px;
}

@media (max-width: 768px) {
    .discount_tiers {
        flex-direction: column;
        align-items: center;
    }
    
    .collection_products {
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
    }
}
</style>

{% javascript %}
document.addEventListener("DOMContentLoaded", function () {
  $(document).on('click', 'button, input[type="submit"], .btn, .add-to-cart', function(e) {
    var $this = $(this);
    var buttonText = ($this.text() || $this.val() || '').toLowerCase();
    var isAddToCartButton = false;
    
    if (buttonText.includes('add to cart') || 
        buttonText.includes('add to bag') ||
        buttonText.includes('add to basket') ||
        ($this.hasClass('btn') && !buttonText.includes('view') && !buttonText.includes('checkout') && !buttonText.includes('continue'))) {
      isAddToCartButton = true;
    }
    
    if (isAddToCartButton) {
      var bundleData = $('#bundle_items_data .bundle_data');
      var isBundleProduct = $('.enhanced_bundle_items').length > 0;
      
      if (bundleData.length > 0 || isBundleProduct) {
        e.preventDefault();
        e.stopPropagation();
        addBundleToCart();
        return false;
      }
    }
  });

  $(document).on('submit', 'form', function(e) {
    var bundleData = $('#bundle_items_data .bundle_data');
    var isBundleProduct = $('.enhanced_bundle_items').length > 0;
    
    if (bundleData.length > 0 || isBundleProduct) {
      e.preventDefault();
      e.stopPropagation();
      addBundleToCart();
      return false;
    }
  });

  $('form[action*="/cart/add"]').each(function() {
    var $form = $(this);
    
    $form.off('submit').on('submit', function(e) {
      var bundleData = $('#bundle_items_data .bundle_data');
      var isBundleProduct = $('.enhanced_bundle_items').length > 0;
      
      if (bundleData.length > 0 || isBundleProduct) {
        e.preventDefault();
        e.stopPropagation();
        addBundleToCart();
        return false;
      }
    });
  });

  function addBundleToCart() {
    var mainVariant = $('input[name="id"]').val();
    var qty = parseInt($('input[name="quantity"]').val()) || 1;
    
    var props = {};
    var bundleDataElements = $('#bundle_items_data .bundle_data');
    
    bundleDataElements.each(function(index) {
      var title = $(this).data('title');
      var qty = $(this).data('qty');
      props['Produkt ' + (index + 1)] = title + ' - ' + qty + 'x';
    });
    
    var bundleSavings = $('.bundle_savings .money').text();
    if (bundleSavings) {
      props['Bundle Ersparnis'] = bundleSavings;
    }
    
    var individualTotal = $('.individual_total .money').text();
    if (individualTotal) {
      props['Gesamtsumme'] = individualTotal;
    }
    
    var addToCartBtn = $('.btn-add-to-cart, button[type="submit"]');
    var originalText = addToCartBtn.text();
    addToCartBtn.text('Adding to Cart...').prop('disabled', true);
    
    var cartData = {
      items: [
        {
          id: mainVariant,
          quantity: qty,
          properties: props
        }
      ]
    };
    
    $.ajax({
      url: '/cart/add.js',
      method: 'POST',
      data: JSON.stringify(cartData),
      contentType: 'application/json',
      dataType: 'json',
      success: function(data) {
        showBundleSuccessMessage();
        updateCartCount();
        addToCartBtn.text(originalText).prop('disabled', false);
      },
      error: function(xhr, status, error) {
        if (xhr.status === 200 && xhr.responseText) {
          showBundleSuccessMessage();
          updateCartCount();
          addToCartBtn.text(originalText).prop('disabled', false);
        } else {
          alert('Error adding bundle to cart. Please try again.');
          addToCartBtn.text(originalText).prop('disabled', false);
        }
      }
    });
  }

  function showBundleSuccessMessage() {
    var message = $('<div class="bundle-success-message"><div class="bundle-success-content"><h4>Bundle Added to Cart!</h4><p>All bundle items have been added to your cart successfully.</p><a href="/cart" class="btn btn-primary">View Cart</a></div></div>');
    
    $('body').append(message);
    
    setTimeout(function() {
      message.fadeOut(300, function() {
        $(this).remove();
      });
    }, 5000);
  }

  // Update cart count
  function updateCartCount() {
    $.get('/cart.js', function(cart) {
      var cartCount = $('.cart-count');
      if (cartCount.length) {
        cartCount.text(cart.item_count);
      }
    }).fail(function(error) {
      console.error('Error updating cart count:', error);
    });
  }
});




jQuery(document).ready(function($) {

	var sectionID = $('.section_product').attr('id').replace('shopify-section-', '');

	var productLoad = function() {

		if ( productImage && theme.productViewType == 'carousel' ){

			// PRODUCT IMAGES
			var primaryImg = $('#primary_img_' + sectionID);

			var galleryImages = $('#gallery_big-' + sectionID);
			var galleryImagesPrev = $('#prev_' + sectionID);
			var galleryImagesNext = $('#next_' + sectionID);

			var galleryThumbs = $('#gallery_thumbs-' + sectionID);

			var galleryImageSlider = new Swiper(galleryImages, {
				effect: 'fade',
			});

			var galleryThumbSlider = new Swiper(galleryThumbs, {
				prevButton: galleryImagesPrev,
				nextButton: galleryImagesNext,
				slidesPerView: 3,
				centeredSlides: true,
				direction: 'vertical',
				breakpoints: {
					991: {
						slidesPerView: 3
					}
				},
				spaceBetween: 10,
				touchRatio: 0.2,
			});


			$(window).on('load', function() {
			// Update swiper after loading if methods exist
			if (galleryImageSlider && typeof galleryImageSlider.update === 'function') {
				galleryImageSlider.update();
			}
			if (galleryThumbSlider && typeof galleryThumbSlider.update === 'function') {
				galleryThumbSlider.update();
			}
			});


			galleryImageSlider.params.control = galleryThumbSlider;
			galleryThumbSlider.params.control = galleryImageSlider;
		};


		// PRODUCT OPTIONS
		var productSelect = 'product_select_' + sectionID;

		var productArray = JSON.parse( $('#product_json_' + sectionID).html() );
		var variantWeights = JSON.parse( $('#variant_weights_' + sectionID).html() );

		var productWeight = $('#single_product__weight-' + sectionID);
		var productSKU = $('#single_product__sku-' + sectionID);
		var productBarcode = $('#single_product__barcode-' + sectionID);

		var productAvailability = $('#single_product__availability-' + sectionID);
		var productPrice = $('#single_product__price-' + sectionID);

		var productQuantity = $('#single_product__quantity-' + sectionID);
		var productAdd = $('#single_product__addtocart-' + sectionID);


		selectCallback = function(variant, selector) {
			if ( variant && variant.available ) {

				// VARIANT WEIGHT
				if ( variant.requires_shipping == true ) {

					for ( var i in variantWeights ) {
						var i = parseInt(i);

						if ( i == variant.id ) {
							productWeight.html( variantWeights[i] );
						};
					};
				}
				else {
					productWeight.html( '—' );
				};


				// VARIANT SKU
				if ( variant.sku && variant.sku.length ) {
					productSKU.html( variant.sku );
				}
				else {
					productSKU.html( '—' );
				};


				// VARIANT BARCODE
				if ( variant.barcode != null ) {
					productBarcode.html( variant.barcode );
				}
				else {
					productBarcode.html( '—' );
				};


				// VARIANT AVAILABILITY
				if ( variant.inventory_management != null ) {

					if ( ( variant.inventory_quantity == 0 ) && ( variant.inventory_policy == 'continue' ) ) {
						productAvailability.removeClass('notify_danger').addClass('notify_success').html( producText.available );
					}
					else {
						productAvailability.removeClass('notify_danger').addClass('notify_success').html( variant.inventory_quantity + ' ' + producText.items );
					};

				}
				else {
					productAvailability.removeClass('notify_danger').addClass('notify_success').html( producText.available );
				};

				// VARIANT PRICE
				if ( variant.price < variant.compare_at_price ) {
					productPrice.html( '<span class="money">' + Shopify.formatMoney(variant.price, theme.moneyFormat) + '</span>' + '<span class="money money_sale">' + Shopify.formatMoney(variant.compare_at_price, theme.moneyFormat) + '</span><span class="money_sale_percent">– ' + parseInt( 100 - ( variant.price*100 )/variant.compare_at_price ) + '%</span>');
				}
				else {
					productPrice.html( '<span class="money">' + Shopify.formatMoney(variant.price, theme.moneyFormat) + '</span>' );
				};


				// VARIANT QUANTITY
				productQuantity.removeAttr('disabled', 'disabled');


				// VARIANT ADD TO CART BUTTON
				productAdd.removeAttr('disabled', 'disabled');


				if ( productImage && theme.productViewType == 'carousel' ) {

					// SWITCH VARIANT IMAGE (CAROUSEL VIEW)
					var newImage = variant.featured_image;
					var element = primaryImg[0];

					Shopify.Image.switchImage(newImage, element, function(newImageSizedSrc, newImage, element) {
						galleryImageSlider.slides.each(function(i) {
							var thumb = $(this).find('img').attr('src').replace('_crop_top', '').replace('_crop_center', '').replace('_crop_bottom', '').replace(/\?v=.*/ , '');
							var newImg = newImageSizedSrc.replace(/\?v=.*/ , '');

							if ( thumb == newImg ) {
								galleryImageSlider.slideTo(i);
							};
						});
					});
				};
				
				// SWITCH VARIANT IMAGE (STICKY VIEW)
				if ( productImage && theme.productViewType == 'sticky' && $(window).width() > 991 ){
					var variantImg = variant.featured_image.src;
					var imageOll = $('.single_product__img img');
				
					for (var i = 0; i < imageOll.length; i++) {
						var imgSrc = $(imageOll[i]).attr('src').replace('_570x617_crop_top', '');
						
						if ( variantImg.indexOf(imgSrc) > 0 ){
							var offsetImg = $(imageOll[i]).offset().top - $('#page_header').outerHeight();
							
							$('body,html').animate({scrollTop: offsetImg - 100}, 500);
							$(window).trigger('scroll');
						};
					}
				};


				// HIDE NOTIFY BUTTON
				$('#notify_trigger_button').removeClass('visible');
				$('.product_notify .notify_form').hide(300);

			}
			else {
				// VARIANT AVAILABILITY
				productAvailability.removeClass('notify_success').addClass('notify_danger').html( producText.unavailable );


				// VARIANT QUANTITY
				productQuantity.attr('disabled', 'disabled');


				// VARIANT ADD TO CART BUTTON
				productAdd.attr('disabled', 'disabled');

				// SHOW NOTIFY BUTTON
				$('#notify_trigger_button').addClass('visible');
			};


			// SWITCH CURRENCY
			if ( typeof theme.shopCurrency != 'undefined' ) {
				var newCurrency = Currency.cookie.read();
				var moneySelector = productPrice.find('span.money');
				Currency.convertAll( theme.shopCurrency, newCurrency, moneySelector, 'money_format' );

			};

			renderColorOptions(productArray.options);
			renderSizeOptions(productArray.options);
			
		};

		new Shopify.OptionSelectors( productSelect, {
			product: productArray,
			onVariantSelected: selectCallback,
			enableHistoryState: true 
		});

	};


	// LOADING PRODUCTS
	productLoadTrigger = true;

	$(document).on('shopify:section:load', '#shopify-section-' + sectionID, function() {
		productLoad();
		productLoadTrigger = false;
	});

	if ( productLoadTrigger = true ) {
		productLoad();
	};
	

	// ADD WISHLIST
	$('#wishlist_add').on('click', function(e) {
		e.preventDefault();
		$('#wishlist_form').submit();
		
	});
	

	$('#notify_trigger_button').on('click',function(){
		$('.product_notify .notify_form').show(600);
	});

	
	// RENDER COLOR OPTION
	var renderColorOptions = function(options){
		var colorOptionIndex = $('.color_product__options .color_toggle').data('option-index');
		var colorSelect = $('#shopify-section-' + sectionID + ' .single-option-selector').eq(colorOptionIndex);
		var selectId = '#' + colorSelect.attr('id');
		var container = $('#shopify-section-' + sectionID + ' .color_product__options .color_toggle');
		var content = '<label>' + options[colorOptionIndex] + ':</label>';

		$( selectId + ' option' ).each(function(){
			var value = $(this).val();
			colorSelect.parent('.selector-wrapper').addClass('hidden');
			if ( colorSelect.val() == value ) {
				return content = content + '<div class="color_item current" data-val="' + value + '" title="' + value + '"><span class="color_inner" style="background-color: ' + value + '"></span></div>';
			} else {
				return content = content + '<div class="color_item" data-val="' + value + '" title="' + value + '"><span class="color_inner" style="background-color: ' + value + '"></span></div>';
			};
		});

		container.html(content);

		$('.color_product__options .color_item').on('click', function(e){
			colorSelect.val( $(this).data('val') ).trigger('change');
		});
		
	};

	// RENDER SIZE OPTION
	var renderSizeOptions = function(options){
		var sizeOptionIndex = $('.size_product__options .size_toggle').data('option-index');
		var sizeSelect = $('#shopify-section-' + sectionID + ' .single-option-selector').eq(sizeOptionIndex);
		var selectId = '#' + sizeSelect.attr('id');
		var container = $('#shopify-section-' + sectionID + ' .size_product__options .size_toggle');
		var content = '<label>' + options[sizeOptionIndex] + ':</label>';

		$( selectId + ' option' ).each(function(){
			var value = $(this).val();
			sizeSelect.parent('.selector-wrapper').addClass('hidden');
			if ( sizeSelect.val() == value ) {
				return content = content + '<div class="size_item current" data-val="' + value + '"><span class="size_inner">' + value + '</span></div>';
			} else {
				return content = content + '<div class="size_item" data-val="' + value + '"><span class="size_inner">' + value + '</span></div>';
			};
		});

		container.html(content);

		$('.size_product__options .size_item').on('click', function(e){
			sizeSelect.val( $(this).data('val') ).trigger('change');
		});
		
	};


	// STICKY VIEW 
	if( theme.productViewType == 'sticky' && $(window).width() > 991 ){
		var target = $('.single_product__info');
		var mainUnit = target.parent();
		var sibling = target.siblings('.single_product__img');

		$(window).on('load scroll resize', function() {
			var scrolledValue = parseInt( $(window).scrollTop() );
			var offsetValue = parseInt( mainUnit.offset().top );
			var mainUnitEnd = mainUnit.outerHeight() + mainUnit.offset().top + 70;

			if(scrolledValue > offsetValue ){
				target.addClass('sticky').css({
					'top':$('#page_header').outerHeight() + 'px',
					'left':( sibling.offset().left + sibling.outerWidth() ) + 'px'
				});
			} else {
				target.removeClass('sticky');
			};


			if( ( scrolledValue + $(window).height() ) > mainUnitEnd ){
				target.removeClass('sticky');
			};

		});
	}


	$(document).on('click', '#bundle_items_popup_btn', function(e) {
		e.preventDefault();
		var popup = $('#bundle_items_popup');
		if (popup.length) {
			popup.fadeIn(300);
			$('body').addClass('popup_open');
		}
	});

	$(document).on('click', '#close_bundle_popup', function(e) {
		e.preventDefault();
		$('#bundle_items_popup').fadeOut(300);
		$('body').removeClass('popup_open');
	});

	$(document).on('click', '.bundle_popup', function(e) {
		if (e.target === this) {
			$(this).fadeOut(300);
			$('body').removeClass('popup_open');
		}
	});

	$(document).on('click', '.bundle_popup_content', function(e) {
		e.stopPropagation();
	});

	$(document).on('keydown', function(e) {
		if (e.keyCode === 27 && $('#bundle_items_popup').is(':visible')) {
			$('#bundle_items_popup').fadeOut(300);
			$('body').removeClass('popup_open');
		}
	});

	// Enhanced bundle cart functionality - Catch specific add to cart actions
	$(document).on('click', 'button, input[type="submit"], .btn, .add-to-cart', function(e) {
		var $this = $(this);
		var buttonText = ($this.text() || $this.val() || '').toLowerCase();
		var isAddToCartButton = false;
		
		// Check if this is specifically an add to cart button (not view cart, checkout, etc.)
		if (buttonText.includes('add to cart') || 
			buttonText.includes('add to bag') ||
			buttonText.includes('add to basket') ||
			($this.hasClass('btn') && !buttonText.includes('view') && !buttonText.includes('checkout') && !buttonText.includes('continue'))) {
			isAddToCartButton = true;
		}
		
		if (isAddToCartButton) {
			var bundleData = $('#bundle_items_data .bundle_data');
			var isBundleProduct = $('.enhanced_bundle_items').length > 0;
			
			if (bundleData.length > 0 || isBundleProduct) {
				e.preventDefault();
				e.stopPropagation();
				addBundleToCart();
				return false;
			}
		}
	});

	// Catch form submissions
	$(document).on('submit', 'form', function(e) {
		var bundleData = $('#bundle_items_data .bundle_data');
		var isBundleProduct = $('.enhanced_bundle_items').length > 0;
		
		if (bundleData.length > 0 || isBundleProduct) {
			e.preventDefault();
			e.stopPropagation();
			addBundleToCart();
			return false;
		}
	});

	// Override the default add to cart behavior
	$(document).ready(function() {
		// Find and override any existing add to cart forms
		$('form[action*="/cart/add"]').each(function() {
			var $form = $(this);
			
			$form.off('submit').on('submit', function(e) {
				var bundleData = $('#bundle_items_data .bundle_data');
				var isBundleProduct = $('.enhanced_bundle_items').length > 0;
				
				if (bundleData.length > 0 || isBundleProduct) {
					e.preventDefault();
					e.stopPropagation();
					addBundleToCart();
					return false;
				}
			});
		});
	});

	// Function to add bundle as single item to cart
	function addBundleToCart() {
		// Get the main product variant ID and quantity
		var mainVariant = $('input[name="id"]').val();
		var qty = parseInt($('input[name="quantity"]').val()) || 1;
		
		// Collect bundle items and create properties
		var props = {};
		var bundleDataElements = $('#bundle_items_data .bundle_data');
		
		bundleDataElements.each(function(index) {
			var title = $(this).data('title');
			var qty = $(this).data('qty');
			props['Produkt ' + (index + 1)] = title + ' - ' + qty + 'x';
		});
		
		// Add bundle savings info
		var bundleSavings = $('.bundle_savings .money').text();
		if (bundleSavings) {
			props['Bundle Ersparnis'] = bundleSavings;
		}
		
		// Add total individual price
		var individualTotal = $('.individual_total .money').text();
		if (individualTotal) {
			props['Gesamtsumme'] = individualTotal;
		}
		
		// Show loading state
		var addToCartBtn = $('.btn-add-to-cart');
		var originalText = addToCartBtn.text();
		addToCartBtn.text('Adding to Cart...').prop('disabled', true);
		
		// Prepare the data to send
		var cartData = {
			items: [
				{
					id: mainVariant,
					quantity: qty,
					properties: props
				}
			]
		};
		
		// Send only main bundle product with properties
		$.ajax({
			url: '/cart/add.js',
			method: 'POST',
			data: JSON.stringify(cartData),
			contentType: 'application/json',
			dataType: 'json',
			success: function(data) {
				// Show success message
				showBundleSuccessMessage();
				
				// Update cart count
				updateCartCount();
				
				// Reset button
				addToCartBtn.text(originalText).prop('disabled', false);
			},
			error: function(xhr, status, error) {
				// Check if it's a successful response with parsing error (theme issue)
				if (xhr.status === 200 && xhr.responseText) {
					// Show success message even if there's a parsing error
					showBundleSuccessMessage();
					updateCartCount();
					addToCartBtn.text(originalText).prop('disabled', false);
				} else {
					alert('Error adding bundle to cart. Please try again.');
					addToCartBtn.text(originalText).prop('disabled', false);
				}
			}
		});
	}

	// Show success message for bundle addition
	function showBundleSuccessMessage() {
		var message = $('<div class="bundle-success-message"><div class="bundle-success-content"><h4>Bundle Added to Cart!</h4><p>All bundle items have been added to your cart successfully.</p><a href="/cart" class="btn btn-primary">View Cart</a></div></div>');
		
		$('body').append(message);
		
		// Auto remove after 5 seconds
		setTimeout(function() {
			message.fadeOut(300, function() {
				$(this).remove();
			});
		}, 5000);
	}

	function updateCartCount() {
		$.ajax({
			url: '/cart.js',
			method: 'GET',
			dataType: 'json',
			success: function(cart) {
				var cartCount = $('.cart-count');
				if (cartCount.length) {
					cartCount.text(cart.item_count);
				}
			},
			error: function(xhr, status, error) {
				if (xhr.status === 200 && xhr.responseText) {
					try {
						var response = JSON.parse(xhr.responseText);
						var cartCount = $('.cart-count');
						if (cartCount.length && response.item_count) {
							cartCount.text(response.item_count);
						}
					} catch (e) {
					}
				}
			}
		});
	}

	$(document).ready(function() {
	});

	// User Collection Bundle Functionality
	var selectedItems = [];
	var collectionData = {};

	$(document).on('click', '.add_to_collection_btn', function() {
		var $btn = $(this);
		var $item = $btn.closest('.collection_product_item');
		var productId = $btn.data('product-id');
		var variantId = $item.data('variant-id');
		var price = $item.data('price');
		var title = $item.find('.product_title a').text();
		var variantTitle = $item.find('.variant_selector option:selected').text() || $item.find('.single_variant').text();

		if ($btn.hasClass('added')) {
			removeFromCollection(productId);
			$btn.removeClass('added').text('Add');
			$item.removeClass('selected');
		} else {
			addToCollection(productId, variantId, price, title, variantTitle);
			$btn.addClass('added').text('Added');
			$item.addClass('selected');
		}
		
		updateSelectedItems();
		updateDiscountTiers();
		updateTotals();
	});

	$(document).on('change', '.variant_selector', function() {
		var $selector = $(this);
		var $item = $selector.closest('.collection_product_item');
		var selectedOption = $selector.find('option:selected');
		var newVariantId = selectedOption.val();
		var newPrice = selectedOption.data('price');
		var productId = $selector.data('product-id');

		$item.attr('data-variant-id', newVariantId);
		$item.attr('data-price', newPrice);
		$item.find('.product_price .money').text(Shopify.formatMoney(newPrice, theme.moneyFormat));

		if (selectedItems.find(item => item.productId === productId)) {
			updateItemInCollection(productId, newVariantId, newPrice);
			updateSelectedItems();
			updateTotals();
		}
	});

	function addToCollection(productId, variantId, price, title, variantTitle) {
		var existingItem = selectedItems.find(item => item.productId === productId);
		if (existingItem) {
			existingItem.variantId = variantId;
			existingItem.price = price;
			existingItem.variantTitle = variantTitle;
		} else {
			selectedItems.push({
				productId: productId,
				variantId: variantId,
				price: price,
				title: title,
				variantTitle: variantTitle
			});
		}
	}

	function removeFromCollection(productId) {
		selectedItems = selectedItems.filter(item => item.productId !== productId);
	}

	function updateItemInCollection(productId, variantId, price) {
		var item = selectedItems.find(item => item.productId === productId);
		if (item) {
			item.variantId = variantId;
			item.price = price;
		}
	}

	function updateSelectedItems() {
		var $selectedItems = $('#selected_items');
		var $selectedList = $('#selected_items_list');
		
		if (selectedItems.length === 0) {
			$selectedItems.hide();
			return;
		}

		$selectedItems.show();
		$selectedList.empty();

		selectedItems.forEach(function(item, index) {
			var itemHtml = '<div class="selected_item">' +
				'<span class="selected_item_name">' + item.title + ' (' + item.variantTitle + ')</span>' +
				'<span class="selected_item_price">' + Shopify.formatMoney(item.price, theme.moneyFormat) + '</span>' +
				'<button type="button" class="remove_item_btn" data-product-id="' + item.productId + '">Remove</button>' +
				'</div>';
			$selectedList.append(itemHtml);
		});
	}

	$(document).on('click', '.remove_item_btn', function() {
		var productId = $(this).data('product-id');
		removeFromCollection(productId);
		
		var $item = $('.collection_product_item[data-product-id="' + productId + '"]');
		$item.find('.add_to_collection_btn').removeClass('added').text('Add');
		$item.removeClass('selected');
		
		updateSelectedItems();
		updateDiscountTiers();
		updateTotals();
	});

	function updateDiscountTiers() {
		var itemCount = selectedItems.length;
		$('.discount_tier').removeClass('active');
		
		if (itemCount >= 3) {
			$('.discount_tier').eq(0).addClass('active');
		}
		if (itemCount >= 4) {
			$('.discount_tier').eq(1).addClass('active');
		}
		if (itemCount >= 6) {
			$('.discount_tier').eq(2).addClass('active');
		}
	}

	function updateTotals() {
		var subtotal = selectedItems.reduce((sum, item) => sum + item.price, 0);
		var discount = 0;
		var itemCount = selectedItems.length;

		if (itemCount >= 6) {
			discount = subtotal * 0.20;
		} else if (itemCount >= 4) {
			discount = subtotal * 0.15;
		} else if (itemCount >= 3) {
			discount = subtotal * 0.10;
		}

		var total = subtotal - discount;

		$('#collection_subtotal').text(Shopify.formatMoney(subtotal, theme.moneyFormat));
		$('#collection_discount').text(Shopify.formatMoney(discount, theme.moneyFormat));
		$('#collection_total').text(Shopify.formatMoney(total, theme.moneyFormat));
	}

	// Override add to cart for user collection products
	$(document).on('submit', 'form[action*="/cart/add"]', function(e) {
		if (selectedItems.length > 0) {
			e.preventDefault();
			addCollectionToCart();
			return false;
		}
	});

	function addCollectionToCart() {
		var items = selectedItems.map(function(item) {
			return {
				id: item.variantId,
				quantity: 1,
				properties: {
					'Collection Item': item.title + ' (' + item.variantTitle + ')'
				}
			};
		});

		var cartData = { items: items };

		$.ajax({
			url: '/cart/add.js',
			method: 'POST',
			data: JSON.stringify(cartData),
			contentType: 'application/json',
			dataType: 'json',
			success: function(data) {
				showBundleSuccessMessage();
				updateCartCount();
				selectedItems = [];
				updateSelectedItems();
				updateDiscountTiers();
				updateTotals();
				$('.collection_product_item').removeClass('selected');
				$('.add_to_collection_btn').removeClass('added').text('Add');
			},
			error: function(xhr, status, error) {
				if (xhr.status === 200 && xhr.responseText) {
					showBundleSuccessMessage();
					updateCartCount();
					selectedItems = [];
					updateSelectedItems();
					updateDiscountTiers();
					updateTotals();
					$('.collection_product_item').removeClass('selected');
					$('.add_to_collection_btn').removeClass('added').text('Add');
				} else {
					alert('Error adding collection to cart. Please try again.');
				}
			}
		});
	}

});
{% endjavascript %}

